import yaml
import sys
import math

def total_steps(cfg):
    angle = cfg["stepper_angle"]
    microstep = cfg["microstep"]
    gear_big = cfg["gear_big"]
    gear_small = cfg["gear_small"]
    worm = cfg["worm_reduction"]
    steps = 360.0 / angle * microstep * gear_big / gear_small * worm
    assert(abs(steps - round(steps)) < 1e-3)
    return round(steps)


def calculate_goto(fcpu):
	psc = 64
	psc0 = 1
	psc1 = 1
	psc2 = 0
	tick_us = int(psc * 1000000 / fcpu)
	return psc, tick_us, psc0, psc1, psc2

template = """
// This is autogenerated file. Don't edit!
#pragma once

#define F_CPU        {fcpu}UL

#define X_STEPS      {x_total_steps}UL
#define Y_STEPS      {y_total_steps}UL

#define BAUD {baud}

#define GOTO_PSC  {g_psc}
#define GOTO_TICK_US {g_tick}
#define GOTO_PSC0 {g_psc0}
#define GOTO_PSC1 {g_psc1}
#define GOTO_PSC2 {g_psc2}

"""

with open(sys.argv[1]) as f:
    cfg = yaml.load(f)

args={}

args["baud"]=cfg["system"]["baud"]
args["fcpu"]=cfg["system"]["fcpu"]

args["y_total_steps"] = total_steps(cfg["config"]["axis_y"])
args["x_total_steps"]  = total_steps(cfg["config"]["axis_x"])

# GOTO config
args["rotation_time"] = cfg["movement"]["full_rotation_time"]

args["g_psc"], args["g_tick"], args["g_psc0"], args["g_psc1"], args["g_psc2"] = calculate_goto(args["fcpu"])

res = template.format(**args)

with open(sys.argv[2], "w") as f:
    f.write(res)

day = 12*60*60
tick_serve = day / args["x_total_steps"]*1e6

max_period_us = args["g_tick"] * 65535
print("max period: %i us" % max_period_us)
print("tick serve: %i us" % tick_serve)
print(max_period_us / tick_serve)
period_serve = tick_serve / args["g_tick"]
print(period_serve)
