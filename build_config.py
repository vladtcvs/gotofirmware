import yaml
import sys
import math

def total_steps(cfg):
    angle = cfg["stepper_angle"]
    microstep = cfg["microstep"]
    gear_big = cfg["gear_big"]
    gear_small = cfg["gear_small"]
    worm = cfg["worm_reduction"]
    steps = 360.0 / angle * microstep * gear_big / gear_small * worm
    assert(abs(steps - round(steps)) < 1e-3)
    return round(steps)

def reduce(a, b):
    k = math.gcd(a, b)
    return (a//k, b//k)

def calculate_goto_prescaler(fcpu, ha_steps_per_sec, dec_steps_per_sec):
    psc = 64
    psc0 = 1
    psc1 = 1
    psc2 = 0
    counter_ha  = int(fcpu / psc / ha_steps_per_sec)
    counter_dec = int(fcpu / psc / dec_steps_per_sec)
    return counter_ha, counter_dec, psc0, psc1, psc2

template = """
// This is autogenerated file. Don't edit!
#pragma once

#define F_CPU         {fcpu}UL

#define HA_STEPS      {ha_total_steps}UL
#define HA_2_STEPS_A  {ha_a}L
#define HA_2_STEPS_B  {ha_b}L

#define DEC_STEPS     {dec_total_steps}UL
#define DEC_2_STEPS_A {dec_a}L
#define DEC_2_STEPS_B {dec_b}L

#define SUBSECONDS    {subseconds}

#define BAUD {baud}

#define GOTO_TIMER_COUNTER_HA {goto_counter_ha}
#define GOTO_TIMER_COUNTER_DEC {goto_counter_dec}
#define GOTO_PSC0 {goto_psc0}
#define GOTO_PSC1 {goto_psc1}
#define GOTO_PSC2 {goto_psc2}

"""


with open(sys.argv[1]) as f:
    cfg = yaml.load(f)

fcpu=cfg["system"]["fcpu"]

dec_total_seconds = 360 * 60 * 60
dec_total_steps = total_steps(cfg["config"]["dec"])
dec_a, dec_b = reduce(dec_total_steps, dec_total_seconds)

ha_total_seconds = 24 * 60 * 60
ha_total_steps  = total_steps(cfg["config"]["ha"])
ha_a, ha_b = reduce(ha_total_steps, ha_total_seconds)

subseconds = cfg["movement"]["subseconds"]
rotation_time = cfg["movement"]["full_rotation_time"]
goto_ha_steps_per_second = int(ha_total_steps / rotation_time)
goto_dec_steps_per_second = int(dec_total_steps / rotation_time)

goto_counter_ha, goto_counter_dec, goto_psc0, goto_psc1, goto_psc2 = calculate_goto_prescaler(fcpu, goto_ha_steps_per_second, goto_dec_steps_per_second)



res = template.format(baud=cfg["system"]["baud"],
                      fcpu=fcpu,
                      ha_total_steps = ha_total_steps,
                      ha_a=ha_a,
                      ha_b=ha_b,
                      dec_total_steps=dec_total_steps,
                      dec_a=dec_a,
                      dec_b=dec_b,
                      subseconds=subseconds,
                      goto_counter_ha=goto_counter_ha,
                      goto_counter_dec=goto_counter_dec,
                      goto_psc0 = goto_psc0,
                      goto_psc1 = goto_psc1,
                      goto_psc2 = goto_psc2)

with open(sys.argv[2], "w") as f:
    f.write(res)

