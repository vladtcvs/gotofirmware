import yaml
import sys
import math

def total_steps(cfg):
    angle = cfg["stepper_angle"]
    microstep = cfg["microstep"]
    gear_big = cfg["gear_big"]
    gear_small = cfg["gear_small"]
    worm = cfg["worm_reduction"]
    steps = 360.0 / angle * microstep * gear_big / gear_small * worm
    assert(abs(steps - round(steps)) < 1e-3)
    return round(steps)

def reduce(a, b):
    k = math.gcd(a, b)
    return (a//k, b//k)

template = """
// This is autogenerated file. Don't edit!
#pragma once

#define HA_STEPS      {ha_total_steps}UL
#define HA_2_STEPS_A  {ha_a}L
#define HA_2_STEPS_B  {ha_b}L

#define DEC_STEPS     {dec_total_steps}UL
#define DEC_2_STEPS_A {dec_a}L
#define DEC_2_STEPS_B {dec_b}L

#define SUBSECONDS    {subseconds}

#define GOTO_HA_STEPS_PER_SECOND  {goto_ha_steps_per_second}
#define GOTO_DEC_STEPS_PER_SECOND {goto_dec_steps_per_second}

#define BAUD {baud}

"""


with open(sys.argv[1]) as f:
    cfg = yaml.load(f)

dec_total_seconds = 360 * 60 * 60
dec_total_steps = total_steps(cfg["config"]["dec"])
dec_a, dec_b = reduce(dec_total_steps, dec_total_seconds)

ha_total_seconds = 24 * 60 * 60
ha_total_steps  = total_steps(cfg["config"]["ha"])
ha_a, ha_b = reduce(ha_total_steps, ha_total_seconds)

subseconds = cfg["movement"]["subseconds"]
rotation_time = cfg["movement"]["full_rotation_time"]
goto_ha_steps_per_second = int(ha_total_steps / rotation_time)
goto_dec_steps_per_second = int(dec_total_steps / rotation_time)

res = template.format(baud=cfg["connection"]["baud"],
                      ha_total_steps = ha_total_steps,
                      ha_a=ha_a,
                      ha_b=ha_b,
                      dec_total_steps=dec_total_steps,
                      dec_a=dec_a,
                      dec_b=dec_b,
                      subseconds=subseconds,
                      goto_ha_steps_per_second=goto_ha_steps_per_second,
                      goto_dec_steps_per_second=goto_dec_steps_per_second)

with open(sys.argv[2], "w") as f:
    f.write(res)

